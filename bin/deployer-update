#!/bin/sh

usage() { echo "usage: ${0##*/} <unit> <revision> [<program>]"; }

main()
{
  if [ $# -lt 2 ]; then
    usage 1>&2
    exit 100
  fi

  unit="$1"        ; shift
  revision="$1"    ; shift

  # Validate unit and revision against unsafe path chars.

  for a in "$unit" "$revision"; do
    test -z "$a"            && barf "missing unit or revision"
    test "$a" != "${a##*.}" && barf "invalid unit or revision: $a"
    test "$a" != "${a##*/}" && barf "invalid unit or revision: $a"
  done

  # Validate config we use.

  test -z "$DEPLOYER_DEPLOY_ROOT" && barf "missing environment variable: DEPLOYER_DEPLOY_ROOT"
  test -d "$DEPLOYER_DEPLOY_ROOT" || barf "deploy root directory missing: $DEPLOYER_DEPLOY_ROOT"
  test -z "$DEPLOYER_COMMAND"     && barf "missing environment variable: DEPLOYER_COMMAND"

  # If we use an ssh key, run under ssh-agent, and load it from stdin.

  if [ -n "$DEPLOYER_SSH_KEY" ]; then
    test -n "$SSH_AUTH_SOCK" || safe exec ssh-agent "$0" "$unit" "$revision" "$@"
    safe ssh-add /dev/stdin
    exec 0</dev/null
  fi

  # Determine the active and inactive checkouts for this unit.

  target_old=`deployer-inspect -b -a "$unit"` || exit $?
  target_new=`deployer-inspect -b -i "$unit"` || exit $?
  path_old="${DEPLOYER_DEPLOY_ROOT}/${target_old}"
  path_new="${DEPLOYER_DEPLOY_ROOT}/${target_new}"

  # Determine the currently active branch and revision.

  export GIT_WORK_TREE="$path_old"
  export GIT_DIR="${path_old}/.git"
  commit_old=`safe git rev-parse HEAD`
  test -n "$commit_old" || barf "error getting current commit hash for: ${target_old}"
  branch_old=`git symbolic-ref HEAD 2>/dev/null`
  branch_old=${branch_old##refs/heads/}

  # If revision is _, try to stay on same branch as active checkout.

  if [ "$revision" = "_" ]; then
    revision="$branch_old"
    test -n "$revision" || barf "error defaulting to active branch: detached checkout?"
  fi

  # Update the inactive checkout with git.

  export GIT_WORK_TREE="$path_new"
  export GIT_DIR="${path_new}/.git"
  export GIT_SSH=deployer-git-ssh
  safe git fetch

  # Unload any per-unit ssh-key, so it's unavailable to the post-update command.

  test -z "$DEPLOYER_SSH_KEY" || safe ssh-add -D

  # Get the new commit hash.

  commit_new=`safe git rev-parse origin/"$revision"`
  test -n "$commit_new" || barf "error getting current revision for: ${target_old}"

  # See if the inactive checkout would differ from the active one.

  differs=0
  if [ "x"`git cat-file -t "$commit_old" 2>/dev/null` != "xcommit" ]; then
    # This commit might not even exist anymore (eg was deleted in force push).
    differs=1
  elif [ "$commit_old" != "$commit_new" ]; then
    # Content hashes differ, so trees must differ.
    differs=1
  elif [ -n "$branch_old" -a "$branch_old" != "$revision" ]; then
    # Content hashes may be identical, but branch names differ, so force a switch.
    differs=1
  fi

  # Exit with special status if it would be identical to the active checkout.

  if [ "$differs" -eq 0 ]; then
    log 2 "no changes for: ${target_new} ${revision}"
    return 99
  fi

  # XXX workaround: git-stash doesn't honor GIT_WORK_TREE / GIT_DIR as of 1.9.1
  log 2 "applying changes to inactive checkout: ${target_new}"
  ( safe cd "$GIT_WORK_TREE" && git stash )
  safe git checkout -B "$revision" origin/"$revision"

  # Run the DEPLOYER_COMMAND program (typically just `make`) to do post-update tasks.
  # Touch a file to indicate that a new deployment happened.

  (
    safe cd "$path_new"
    safe "$DEPLOYER_COMMAND" 1>&2
    safe touch .deployed
  )
  rc="$?" ; if [ "$rc" -ne 0 ]; then return "$rc"; fi

  return 0
}

. shellsafe || { echo "error sourcing shellsafe." 1>&2 ; exit 100 ; }
main "$@"
exit $?

