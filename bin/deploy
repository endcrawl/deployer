#!/bin/sh

usage() { echo "usage: ${0##*/} <unit> [<revision>]"; }

main()
{
  if [ $# -lt 1 ]; then
    usage 1>&2
    exit 100
  fi

  unit="$1" ; shift
  revision="${1:-_}"

  # Validate unit and revision against unsafe chars.

  test -z "$unit"               && barf "missing unit"
  test "$unit" = "."            && barf "invalid unit: $unit"
  test "$unit" = ".."           && barf "invalid unit: $unit"
  test "$unit" != "${unit##*/}" && barf "invalid unit: $unit"
  test -z "$revision"           && barf "missing revision"

  # Source config files in.

  safe . deployer-autoconfigure

  test -z "$DEPLOYER_UNITS_DIR" && barf "missing environment variable: DEPLOYER_UNITS_DIR"
  test -z "$DEPLOYER_QUEUE"     && barf "missing environment variable: DEPLOYER_QUEUE"
  test -z "$DEPLOYER_TRIGGER"   && barf "missing environment variable: DEPLOYER_TRIGGER"

  # Verify that the unit is actually a managed deployment.

  test ! -d "${DEPLOYER_UNITS_DIR}/${unit}" && { shout "unit is unmanaged: ${unit}" ; exit 99 ; }

  # Generate the job file name.

  revision_escaped=`job_escape "$revision"`
  jobdatetime=`date +%Y%m%d.%H%M%S`
  jobrandom=`od -N 4 -t x4 -A n -v < /dev/urandom | sed -e 's/^ //'`
  jobname="${revision_escaped}.${jobdatetime}.${jobrandom}"

  # Enqueue a new job file.

  safe touch     "$DEPLOYER_QUEUE/tmp/$jobname"
  safe chmod g+w "$DEPLOYER_QUEUE/tmp/$jobname"
  safe mv        "$DEPLOYER_QUEUE/tmp/$jobname" "$DEPLOYER_QUEUE/req/$unit/$jobname"

  log 2 "enqueued new deployer job: ${unit}.${jobname}"

  [ -n "$DEPLOYER_TRIGGER" ] && trigger-pull "$DEPLOYER_TRIGGER" >/dev/null 2>&1

  return 0
}

job_escape() {
  sed -e 's/%/%26/g; s/\//%2f/g; s/\./%2e/g' <<EOJOB
$1
EOJOB
}

. shellsafe || { echo "error sourcing shellsafe." 1>&2 ; exit 100 ; }
main "$@"
exit $?

