#!/bin/sh

usage() { echo "usage: ${0##*/} <deploy_root> <unit> <revision> [<program>]"; }

main()
{
  if [ $# -lt 3 ]; then
    usage 1>&2
    exit 100
  fi

  deploy_root="$1" ; shift
  unit="$1"        ; shift
  revision="$1"    ; shift

  # Validate unit against unsafe path chars.

  test -z "$unit"               && barf "invalid unit: $unit"
  test "$unit" != "${unit##*.}" && barf "invalid unit: $unit"
  test "$unit" != "${unit##*/}" && barf "invalid unit: $unit"

  # Require existing a & b directories.

  path_a="${deploy_root}/${unit}.a"
  path_b="${deploy_root}/${unit}.b"

  test -d "$path_a" || barf "missing git checkout: $path_a"
  test -d "$path_b" || barf "missing git checkout: $path_b"

  # Determine the currently active checkout for this unit.

  path_symlink="${deploy_root}/${unit}"

  if [ -L "$path_symlink" ]; then
    target_old=`readlink "$path_symlink"`
  elif [ -e "$path_symlink" ]; then
    barf "non-symlink at: $path_symlink"
  else
    target_old="${unit}.b"
  fi

  # Determine the currently inactive checkout for this unit.

  if [ "$target_old" = "${unit}.a" ]; then
    target_new="${unit}.b"
  else
    target_new="${unit}.a"
  fi

  path_old="${deploy_root}/${target_old}"
  path_new="${deploy_root}/${target_new}"

  # Determine the currently active revision.

  export GIT_WORK_TREE="$path_old"
  export GIT_DIR="${path_old}/.git"
  revision_old=`safe git rev-parse HEAD`
  test -n "$revision_old" || barf "error getting current revision for: ${target_old}"

  # Update the inactive checkout with git.
  # Exit with special status if it would be identical to the active checkout.

  export GIT_WORK_TREE="$path_new"
  export GIT_DIR="${path_new}/.git"
  safe git fetch
  git diff --exit-code "$revision_old" origin/"$revision" >/dev/null
  case $? in
    0)
      log 2 "no changes for: ${target_new} ${revision}"
      exit 99
      ;;
    1)
      log 2 "applying changes to inactive checkout: ${target_new}"
      git stash
      safe git checkout --detach origin/"$revision"
      ;;
    *)
      barf "git-diff failed with exit code: $?"
      ;;
  esac

  # Run the tail program (typically just `make`) to do post-update tasks.
  # Touch a file to indicate that a new deployment happened.

  (
    safe cd "$path_new"
    test $# -eq 0 || safe "$@"
    safe touch .deployed
  )
  rc="$?" ; if [ "$rc" -ne 0 ]; then return "$rc"; fi

  # Create the new symlink under the tmp/ dir.

  safe ln -s "$target_new" "${deploy_root}/tmp/${unit}"

  # Atomically move the new symlink into place.

  (
    safe cd "${deploy_root}/tmp"
    safe mv "$unit" ..
  )
  rc="$?" ; if [ "$rc" -ne 0 ]; then return "$rc"; fi

  log 2 "switched active checkout to: ${target_new}"

  return 0
}

log()   { level="$1" ; shift ; echo "${0##*/}/$$: {L$level} $*" 1>&2; }
shout() { log 1 "$@"; }
barf()  { log 0 "$1"; test $# -gt 1 && exit $2 || exit 111; }
safe()  { "$@" || barf "cannot $*" $?; }

main "$@"
exit $?

