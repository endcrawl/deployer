#!/bin/sh

usage() { echo "usage: ${0##*/} <unit> <revision> [<program>]"; }

main()
{
  if [ $# -lt 2 ]; then
    usage 1>&2
    exit 100
  fi

  unit="$1"        ; shift
  revision="$1"    ; shift

  # Validate unit and revision against unsafe path chars.

  for a in "$unit" "$revision"; do
    test -z "$a"            && barf "missing unit or revision"
    test "$a" != "${a##*.}" && barf "invalid unit or revision: $a"
    test "$a" != "${a##*/}" && barf "invalid unit or revision: $a"
  done

  # Validate config we use.

  test -z "$DEPLOYER_DATA_DIR"    && barf "missing environment variable: DEPLOYER_DATA_DIR"
  test -z "$DEPLOYER_DEPLOY_ROOT" && barf "missing environment variable: DEPLOYER_DEPLOY_ROOT"
  test -d "$DEPLOYER_DEPLOY_ROOT" || barf "deploy root directory missing: $DEPLOYER_DEPLOY_ROOT"

  # Verify that the unit is actually a managed deployment.

  test ! -d "${DEPLOYER_DATA_DIR}/${unit}" && barf "unit is unmanaged: ${unit}"

  # Self-exec to put per-unit settings in environment, unless we've already done that.

  test "$unit" = "$DEPLOYER_UNIT" || safe exec envdir "${DEPLOYER_DATA_DIR}/${unit}" "$0" "$unit" "$revision" "$@"

  # In privileged mode, some per-unit settings are required.

  if [ `id -u` -eq 0 ]; then
    test -z "$DEPLOYER_USER"  && barf "missing required per-unit setting in privileged mode: DEPLOYER_USER"
    test -z "$DEPLOYER_GROUP" && barf "missing required per-unit setting in privileged mode: DEPLOYER_GROUP"
  fi

  # Validate the ssh key path if given.

  test -z "$DEPLOYER_SSH_KEY" || test "${DEPLOYER_SSH_KEY#/}" != "$DEPLOYER_SSH_KEY" || barf "non-absolute path for DEPLOYER_SSH_KEY: $DEPLOYER_SSH_KEY"

  # Run the "bottom half" of this operation. Drop privileges in privileged mode.

  if [ `id -u` -eq 0 ]; then
    {
      safe chown "${DEPLOYER_USER}:${DEPLOYER_GROUP}" /dev/stdin
      setuidgid -s "$DEPLOYER_USER" env HOME=/nonexistent deployer-update "$unit" "$revision" "$@" || exit $?
    } < "${DEPLOYER_SSH_KEY:-/dev/null}" || exit $?
  else
    deployer-update "$unit" "$revision" "$@" < "${DEPLOYER_SSH_KEY:-/dev/null}" || exit $?
  fi

  # Success. Determine the inactive checkout in preparation for a symlink update.

  target_new=`deployer-inspect -b -i "$unit"` || exit $?

  # Create the new symlink under the .tmp/ dir.

  safe ln -s "$target_new" "${DEPLOYER_DEPLOY_ROOT}/.tmp/${unit}"

  # Atomically move the new symlink into place.

  (
    safe cd "${DEPLOYER_DEPLOY_ROOT}/.tmp"
    safe mv "$unit" ..
  )
  rc="$?" ; if [ "$rc" -ne 0 ]; then return "$rc"; fi

  log 2 "switched active checkout to: ${target_new}"

  return 0
}

. shellsafe || { echo "error sourcing shellsafe." 1>&2 ; exit 100 ; }
main "$@"
exit $?

