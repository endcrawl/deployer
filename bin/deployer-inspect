#!/bin/sh

usage() { echo "usage: ${0##*/} [-b] [-a|-i] [-v] <unit>"; }

main()
{
  export DEPLOYER_INSPECT_WHAT="${DEPLOYER_INSPECT_WHAT:-active}"
  export DEPLOYER_INSPECT_BACKEND="${DEPLOYER_INSPECT_BACKEND:-0}"
  export DEPLOYER_INSPECT_VERBOSE="${DEPLOYER_INSPECT_VERBOSE:-0}"

  while [ $# -gt 0 ]; do
    case "$1" in
         -a) DEPLOYER_INSPECT_WHAT='active'   ; shift ;;
         -i) DEPLOYER_INSPECT_WHAT='inactive' ; shift ;;
         -b) DEPLOYER_INSPECT_BACKEND=1       ; shift ;;
         -v) DEPLOYER_INSPECT_VERBOSE=1       ; shift ;;
         -h) usage ; exit 0 ;;
         -*) barf "unknown option: $1" ;;
          *) break ;;
    esac
  done

  if [ $# -ne 1 ]; then
    usage 1>&2
    exit 100
  fi

  unit="$1" ; shift

  # Validate unit.

  test -z "$unit"               && barf "missing unit"
  test "$unit" = "."            && barf "invalid unit: $unit"
  test "$unit" = ".."           && barf "invalid unit: $unit"
  test "$unit" != "${unit##*/}" && barf "invalid unit: $unit"

  # Automatically configure unless we're in backend mode.

  test "$DEPLOYER_INSPECT_BACKEND" -eq 1 -o -n "$DEPLOYER_DEPLOY_ROOT" || safe . deployer-autoconfigure

  # Validate the global config we use.

  test -z "$DEPLOYER_DEPLOY_ROOT" && barf "missing environment variable: DEPLOYER_DEPLOY_ROOT"
  test -d "$DEPLOYER_DEPLOY_ROOT" || barf "deploy root directory missing: $DEPLOYER_DEPLOY_ROOT"
  test -z "$DEPLOYER_UNITS_DIR"   && barf "missing environment variable: DEPLOYER_UNITS_DIR"
  test -d "$DEPLOYER_UNITS_DIR"   || barf "deploy data directory missing: $DEPLOYER_UNITS_DIR"

  # Self-exec to put per-unit settings in environment, unless we've already done that.

  test "$unit" = "$DEPLOYER_UNIT" || safe exec envdir "${DEPLOYER_UNITS_DIR}/${unit}" "$0" "$unit"

  # Validate the per-unit config we use.

  test -z "$DEPLOYER_BASENAME"    && barf "missing environment variable: DEPLOYER_BASENAME"

  # Require existing .a & .b directories, or a bare directory if we're in update-in-place mode.

  deploy_root="$DEPLOYER_DEPLOY_ROOT"
  basename="$DEPLOYER_BASENAME"
  path="${deploy_root}/${basename}"
  path_a="${deploy_root}/${basename}.a"
  path_b="${deploy_root}/${basename}.b"

  if [ "$DEPLOYER_IN_PLACE" -gt 0 ]; then
    test -d "$path"   || barf "missing git checkout: $path"
  else
    test -d "$path_a" || barf "missing git checkout: $path_a"
    test -d "$path_b" || barf "missing git checkout: $path_b"
  fi

  # Determine the currently active and inactive checkouts for this unit.

  if [ "$DEPLOYER_IN_PLACE" -gt 0 ]; then
    target_active="$basename"
    target_inactive="$basename"
  else
    if [ -L "$path" ]; then
      target_active=`safe readlink "$path"` || exit $?
    elif [ -e "$path" ]; then
      barf "non-symlink at: $path"
    else
      barf "failed to find symlink at: $path"
    fi

    if [ "$target_active" = "${basename}.a" ]; then
      target_inactive="${basename}.b"
    else
      target_inactive="${basename}.a"
    fi
  fi

  # Output our findings.

  case "$DEPLOYER_INSPECT_WHAT" in
    active)   what="$target_active" ;;
    inactive) what="$target_inactive" ;;
    *) barf "invalid value for what to inspect" ;;
  esac

  # In verbose mode, also output commit hash and branch.

  if [ "$DEPLOYER_INSPECT_VERBOSE" -gt 0 ]; then
    export GIT_WORK_TREE="${deploy_root}/${what}"
    export GIT_DIR="${deploy_root}/${what}/.git"
    branch=`git symbolic-ref HEAD 2>/dev/null`  # might fail, that's okay
    branch="${branch##refs/heads/}"
    branch="${branch:-(detached)}"
    info=`safe git log -n 1 --pretty="%h %s" HEAD` || exit $?
    what="${what} ${branch} ${info}"
  fi

  safe printf "%s\n" "$what"

  return 0
}

. shellsafe || { echo "error sourcing shellsafe." 1>&2 ; exit 100 ; }
main "$@"
exit $?

