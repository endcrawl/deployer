#!/bin/sh

usage() { echo "usage: ${0##*/} <unit> <revision> [<program>]"; }

main()
{
  if [ $# -lt 2 ]; then
    usage 1>&2
    exit 100
  fi

  unit="$1"        ; shift
  revision="$1"    ; shift

  # Validate unit and revision against unsafe path chars.

  test -z "$unit"               && barf "missing unit"
  test "$unit" = "."            && barf "invalid unit: $unit"
  test "$unit" = ".."           && barf "invalid unit: $unit"
  test "$unit" != "${unit##*/}" && barf "invalid unit: $unit"
  test -z "$revision"           && barf "missing revision"

  # Validate config we use.

  test -z "$DEPLOYER_UNITS_DIR"   && barf "missing environment variable: DEPLOYER_UNITS_DIR"
  test -z "$DEPLOYER_DEPLOY_ROOT" && barf "missing environment variable: DEPLOYER_DEPLOY_ROOT"
  test -d "$DEPLOYER_DEPLOY_ROOT" || barf "deploy root directory missing: $DEPLOYER_DEPLOY_ROOT"

  # Verify that the unit is actually a managed deployment.

  test ! -d "${DEPLOYER_UNITS_DIR}/${unit}" && barf "unit is unmanaged: ${unit}"

  # Self-exec to put per-unit settings in environment, unless we've already done that.

  test "$unit" = "$DEPLOYER_UNIT" || safe exec envdir "${DEPLOYER_UNITS_DIR}/${unit}" "$0" "$unit" "$revision" "$@"

  # In privileged mode, some per-unit settings are required.

  if [ `id -u` -eq 0 ]; then
    test -z "$DEPLOYER_USER"  && barf "missing required per-unit setting in privileged mode: DEPLOYER_USER"
    test -z "$DEPLOYER_GROUP" && barf "missing required per-unit setting in privileged mode: DEPLOYER_GROUP"
  fi

  # Validate the ssh key path if given.

  test -z "$DEPLOYER_SSH_KEY" || test "${DEPLOYER_SSH_KEY#/}" != "$DEPLOYER_SSH_KEY" || barf "non-absolute path for DEPLOYER_SSH_KEY: $DEPLOYER_SSH_KEY"

  # Run the "bottom half" of this operation. Drop privileges in privileged mode.

  if [ `id -u` -eq 0 ]; then
    {
      safe chown "${DEPLOYER_USER}:${DEPLOYER_GROUP}" /dev/stdin
      setuidgid -s "$DEPLOYER_USER" env SSH_AUTH_SOCK="" HOME=`eval echo ~$DEPLOYER_USER` deployer-update "$unit" "$revision" "$@" || exit $?
    } < "${DEPLOYER_SSH_KEY:-/dev/null}" || exit $?
  else
    env SSH_AUTH_SOCK="" deployer-update "$unit" "$revision" "$@" < "${DEPLOYER_SSH_KEY:-/dev/null}" || exit $?
  fi

  # Success. Unless we're in-place, swap active & inactive checkouts via the symlink.

  if [ "$DEPLOYER_IN_PLACE" -gt 0 ]; then
    rc=0
  else
    # Create the new symlink under the .tmp/ dir.

    target_new=`safe deployer-inspect -b -i "$unit"` || exit $?
    safe ln -s "$target_new" "${DEPLOYER_DEPLOY_ROOT}/.tmp/${unit}"

    # Atomically move the new symlink into place.

    (
      safe cd "${DEPLOYER_DEPLOY_ROOT}/.tmp"
      safe mv "$unit" ..
    )
    rc="$?"
  fi

  if [ $rc -eq 0 ]; then
    inspect=`safe deployer-inspect -b -v -a "$unit"` || exit $?
    echo "DEPLOYER_RESULT=$unit $inspect"
    log 2 "deployed:" "$unit" "$inspect"
  fi

  return $rc
}

. shellsafe || { echo "error sourcing shellsafe." 1>&2 ; exit 100 ; }
main "$@"
exit $?

