#!/bin/sh

usage() { echo "usage: ${0##*/} [-a|-i] <unit>"; }

main()
{
  what='active'

  while [ $# -gt 0 ]; do
    case "$1" in
         -a) what='active'   ; shift ;;
         -i) what='inactive' ; shift ;;
         -h) usage ; exit 0 ;;
         -*) barf "unknown option: $1" ;;
          *) break ;;
    esac
  done

  if [ $# -ne 1 ]; then
    usage 1>&2
    exit 100
  fi

  unit="$1" ; shift

  # Validate unit and config we use.
  # TODO in interactive mode, pull in client config automatically.

  test -z "$unit"                 && barf "missing unit"
  test "$unit" != "${unit##*.}"   && barf "invalid unit: $unit"
  test "$unit" != "${unit##*/}"   && barf "invalid unit: $unit"
  test -z "$DEPLOYER_DEPLOY_ROOT" && barf "missing environment variable: DEPLOYER_DEPLOY_ROOT"
  test -d "$DEPLOYER_DEPLOY_ROOT" || barf "deploy root directory missing: $DEPLOYER_DEPLOY_ROOT"

  # Require existing .a & .b directories, unless we're in update-in-place mode (.x).

  deploy_root="$DEPLOYER_DEPLOY_ROOT"
  path_a="${deploy_root}/${unit}.a"
  path_b="${deploy_root}/${unit}.b"
  path_x="${deploy_root}/${unit}.x"

  if [ ! -d "$path_x" ]; then
    test -d "$path_a" || barf "missing git checkout: $path_a"
    test -d "$path_b" || barf "missing git checkout: $path_b"
  fi

  # Determine the currently active checkout for this unit.

  path_symlink="${deploy_root}/${unit}"

  if [ -L "$path_symlink" ]; then
    target_active=`readlink "$path_symlink"`
  elif [ -e "$path_symlink" ]; then
    barf "non-symlink at: $path_symlink"
  else
    barf "failed to find symlink at: $path_symlink"
  fi

  # Determine the currently inactive checkout for this unit.

  if [ "$target_active" = "${unit}.x" ]; then
    target_inactive="${unit}.x"
  elif [ "$target_active" = "${unit}.a" ]; then
    target_inactive="${unit}.b"
  else
    target_inactive="${unit}.a"
  fi

  # Output our findings.

  case "$what" in
    active)   what="$target_active" ;;
    inactive) what="$target_inactive" ;;
  esac

  safe printf "%s\n" "$what"

  return 0
}

. shellsafe || { echo "error sourcing shellsafe." 1>&2 ; exit 100 ; }
main "$@"
exit $?

